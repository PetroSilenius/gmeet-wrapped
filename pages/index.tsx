/** @jsxImportSource @emotion/react */
import { useEffect, useState } from 'react';
import type { GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import {
  Button,
  Typography,
  FormControl,
  FormControlLabel,
  FormLabel,
  Radio,
  RadioGroup,
} from '@mui/material';
import { css } from '@emotion/react';
import useLocalStorage from '../hooks/useLocalStorage';

const Home = ({ currentYear }: { currentYear: string }) => {
  const [accessToken, setAccessToken] = useLocalStorage('accessToken', undefined);
  const [calendars, setCalendars] = useState([]);
  const [selectedCalendar, setSelectedCalendar] = useState('');

  useEffect(() => {
    if (accessToken) {
      fetch(`https://www.googleapis.com/calendar/v3/users/me/calendarList?minAccessRole=writer`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      })
        .then((res) => res.json())
        .then((data) => {
          setCalendars(data.items);
          console.log(data.items);
        });
    }
  }, [accessToken]);

  const signInToGoogle = () => {
    const gapi = (window as any).gapi;

    gapi.load('client:auth2', async () => {
      gapi.client.init({
        apiKey: process.env.GOOGLE_API_KEY,
        clientId: '116870048026-03887r1h0bdmt1cm7jdhtr50qpq9hvi4.apps.googleusercontent.com',
        discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'],
        scope:
          'https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events.readonly',
      });
      await gapi.auth2
        .getAuthInstance()
        .signIn()
        .then((res: any) => setAccessToken(res.wc.access_token));
    });
  };

  return (
    <div>
      <Head>
        <title>Calendar wrapped</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Typography
          component="h1"
          variant="h3"
          css={css`
            color: red;
          `}>
          Your calendar year wrapped
        </Typography>
        <Typography paragraph>
          Get some highlights from your calendar year of {currentYear}. Currently only works on
          Google Calendar.
        </Typography>

        <div>
          {calendars && calendars.length ? (
            <div>
              <FormControl component="fieldset">
                <FormLabel component="legend">Which calendar to wrap</FormLabel>
                <RadioGroup onChange={(event) => setSelectedCalendar(event.target.value)}>
                  {calendars.map((calendar: GCalendar) => (
                    <FormControlLabel
                      control={<Radio />}
                      value={calendar.id}
                      label={calendar.summary}
                      key={calendar.id}
                    />
                  ))}
                </RadioGroup>
              </FormControl>
              <Link href={`/${selectedCalendar}`} passHref>
                <Button>Analyse</Button>
              </Link>
            </div>
          ) : (
            <Button variant="contained" color="primary" onClick={signInToGoogle}>
              Sign In
            </Button>
          )}
        </div>
      </main>

      <footer>
        Powered by{' '}
        <a href="https://silenius.dev">
          <Image src="/profileImg.png" alt="Vercel Logo" width={32} height={32} />
        </a>
      </footer>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  const currentYear = new Date().getFullYear();

  return {
    props: {
      currentYear: currentYear,
    },
  };
};

export default Home;
